@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="card br-0 mt-1">
        <div class="card-header bg-main br-0">
            <div class="row">
                <div class="col">
                    <h2>Blazor Chat</h2>
                </div> 
                <div class="col">
                    <button type="button" class="btn btn-sm btn-danger float-end">Logout</button>
                    <label class="float-end me-2 mt-2 topbar-name">Welcome @AuthenticationState.Name</label>

                </div>
            </div>
        </div>
        <div class="card-body messages-window bg-light d-flex">
            <div class="row" style="flex: 1">
                <div class="col-sm-3 col-3">
                    <UsersList Users="Users"/>
                </div>
                <div class="col-sm-6 col-6 d-flex px-0">
                    <ChatMessages/>
                </div>
            </div>
        </div>
    </div>

</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private HubConnection? _hubConnection;

    public ICollection<string> Users { get; set; } = new HashSet<string>();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!AuthenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _hubConnection = ConfigureHubConnection();

            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync(nameof(IChatHubServer.ConnectUser), AuthenticationState.Name);
        }

    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/blazor-chat"))
           .Build();

        hubConnection.On<string>(nameof(IChatHubClient.UserConnected), (userName) =>
        {
            Users.Add(userName);
            StateHasChanged();
        });

        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
              await _hubConnection.DisposeAsync();
        }
      
    }
}

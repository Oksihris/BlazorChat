@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt;
@inject HttpClient Client

@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="card br-0 mt-1">
        <div class="card-header bg-main br-0">
            <div class="row">
                <div class="col">
                    <h2>Blazor Chat</h2>
                </div> 
                <div class="col">
                    <button type="button" class="btn btn-danger float-end" @onclick="HandleLogout">Logout</button>
                    <label class="float-end me-2 mt-2 topbar-name text-white">Welcome @AuthenticationState.User.Name</label>

                </div>
            </div>
        </div>
        <div class="card-body messages-window bg-light d-flex">
            <div class="row" style="flex: 1">
                <div class="col-sm-3 col-3">
                    <ChatsList  OnUserSelected="OnUserSelected" />
                </div>
                <div class="col-sm-6 col-6 d-flex justify-content-center align-items-center" style="background-color: #f8ffe8;">
                    <ChatDetails SelectedUser="_selectedUser" />
                </div>
                <div class="col-sm-3 col-3">
                    <UsersList Loading="_loadingUsers" Users="Users" OnUserSelected="OnUserSelected" />
                </div>
            </div>
        </div>
    </div>

</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

 
    private HubConnection? _hubConnection;
    
    private bool _loadingUsers = false;

    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();
    
    private UserDto? _selectedUser = null;
    //    private MessageDto? _newIncomingMessage = null;


    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!AuthenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _hubConnection = ConfigureHubConnection();

            _loadingUsers = true;
            var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("api/users", JsonConverter.JsonSerializerOptions);
           // var chatListTask = GetClient().GetFromJsonAsync<IList<UserDto>>("api/users/chats", JsonConverter.JsonSerializerOptions);

            await _hubConnection.StartAsync();

             var usersList = await userListTask;
                if (usersList is not null)
                {
                    Users = usersList;
                }
            _loadingUsers = false;
            await _hubConnection.SendAsync(nameof(IChatHubServer.SetUserOnline), AuthenticationState.User);
            StateHasChanged();
        }

    }

    private HttpClient GetClient()
    {
        Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthenticationState.Token);
        return Client;
    }


    private async Task OnUserSelected(UserDto user)
    {
        _selectedUser = user;
    }

    private async Task HandleLogout()
    {
        await JsRuntime.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
       NavigationManager.NavigateTo("/");
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/blazor-chat"),  
           options => options.AccessTokenProvider = () => Task.FromResult(AuthenticationState.Token))
           .Build();



        hubConnection.On<UserDto>(nameof(IChatHubClient.UserConnected), (newUser) =>
        {
            Users.Add(newUser);
          
            StateHasChanged();

        });

        hubConnection.On<ICollection<UserDto>>(nameof(IChatHubClient.OnlineUsersList), (onlineUsers) =>
        {
            foreach (var user in Users)
            {
                if (onlineUsers.Any(u => u.Id == user.Id))
                {
                    user.IsOnline = true;
                }
            }
            StateHasChanged();
        });

        hubConnection.On<int>(nameof(IChatHubClient.UserIsOnline), (userId) =>
     {
         var user = Users.FirstOrDefault(u => u.Id == userId);
         if (user is not null)
         {
             user.IsOnline = true;
             StateHasChanged();
         }
     });

        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
              await _hubConnection.DisposeAsync();
        }
      
    }

}

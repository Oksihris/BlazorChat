@page "/register"

@inject HttpClient HttpClient

<PageTitle>Register - Chat App</PageTitle>


<div class="container">
    <div class="row">
        <div class="col"></div>
        <div class="col">
            <h2>Blazor Chat - Register</h2>
            <hr/>
            <EditForm Model="RegisterModel" OnInvalidSubmit="RegisterAsync">
                <DataAnnotationsValidator/>
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                        <p class="text-danger">@errorMessage</p>
                }
                 <div class="mb-3">
                    <label class="control-label">Name</label>
                    <InputText @bind-Value="RegisterModel.Name" DisplayName="Name" class="form-control" placeholder="Enter your name"/>
                    <ValidationMessage For="()=>RegisterModel.Name"/>
                </div>
                <div class="mb-3">
                    <label class="control-label">Username</label>
                    <InputText @bind-Value="RegisterModel.UserName" DisplayName="Username" class="form-control" placeholder="Enter username"/>
                    <ValidationMessage For="()=>RegisterModel.UserName"/>
                </div>
                <div class="mb-3">
                    <label class="control-label">Password</label>
                    <InputText type="password" @bind-Value="RegisterModel.Password" DisplayName="Password" class="form-control" placeholder="Enter password" />
                    <ValidationMessage For="()=>RegisterModel.Password" />
                </div>

               <div class="mb-3">
                    <button type="submit" class="btn btn-success float-start" @(_isBusy? "disabled" : "" )>Register</button>

                    <NavLink href="/" class="btn btn-outline-primary float-end" >Login</NavLink>
              <div class ="clearfix"></div>
                </div>

            </EditForm>
        </div>
        <div class="col"></div>
    </div>
</div>


@code {
    private RegisterDto RegisterModel { get; set; } = new();

    private bool _isBusy = false;
    private string? errorMessage = null;

    private async Task RegisterAsync()
    {
        try
        {
            _isBusy = true;
            errorMessage = null;
            var response = await HttpClient.PostAsJsonAsync<RegisterDto>("api/account/register", RegisterModel);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonSerializer.Deserialize<AuthResponseDto>(content, new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    });
            }
            else
            {
                string? errorContent = null;
                try
                {
                    errorContent = await response.Content.ReadAsStringAsync();
                }
                catch
                {
                }
                if (string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error{response.StatusCode} - ${response.ReasonPhrase}";
                }

                _isBusy = false;
                errorMessage = errorContent;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            _isBusy = false;
        }

    }
}
